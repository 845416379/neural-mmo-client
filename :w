import * as textsprite from "./textsprite.js";
import * as OBJ from "./obj.js";

export {PlayerHandler};


class PlayerHandler {
   /*
    * The PlayerHandler receives packets from the server containing player
    * information (other players' movements, interactions with our player)
    * and disperses the signals appropriately.
    */

   constructor(engine) {
      this.players = {};
      this.engine = engine;
   }

   addPlayer(id, params) {
      var player = new Player(id, params);
      this.players[id] = player;
      this.engine.scene.add(player);
   }

   removePlayer( playerIndex ) {
      this.engine.scene.remove(this.players[playerIndex])
      delete this.players[playerIndex];
   }

   updateData(ents) {
      for (var id in this.players) {
         if (!(id in ents)) {
            this.removePlayer(id);
         }
      }

      for (var id in ents) {
         if (!(id in this.players)) {
            this.addPlayer(id, ents[id])
         }
         this.players[id].updateData(this.engine, ents[id], this.players);
      }
   }
}

class Player extends THREE.Object3D {
   constructor(id, params)  {
      super()
      this.translateState = false;
      this.translateDir = new THREE.Vector3(0.0, 0.0, 0.0);
      this.moveTarg = [0, 0];
      this.height = sz;    // above grass, below mountains
      this.entID = params['entID']

      this.initObj(params);
      this.initOverhead(params);
   }

   initObj(params) {
      var pos = params['pos'];
      this.obj = OBJ.loadNN(params['color']);
      this.obj.position.y = this.height;
      this.obj.position.copy(this.coords(pos));
      this.target = this.obj.position.clone();
      this.add(this.obj)
   }

   initOverhead(params) {
      this.overhead = new Overhead(params);
      this.obj.add(this.overhead)
      this.overhead.position.y = sz;
   }

   //pos = (r, c)
   coords(pos) {
      return new THREE.Vector3(pos[1]*sz+sz+sz/2, this.height, pos[0]*sz+sz+sz/2);
   }

   updateData (engine, packet, players) {
      var move = packet['pos'];
      console.log("Move: ", move)
      var thisMove = new Move(this, move);
      var damage = packet['damage'];
      if (damage != null) {
         var thisDamage = new Damage(this, packet['damage']);
      }

      this.overhead.update(packet)

      var targ = packet['target'];
      if (targ != null) {
         var targID = parseInt(targ, 10);
         if  (this.entID != targID && targID in players) {
            switch (packet['attack']) {
               case 'Melee':
                  var thisAttk = new Melee(engine.scene, this, players[targID]);
                  break;
               case 'Range':
                  var thisAttk = new Range(engine.scene, this, players[targID]);
                  break;
               case 'Mage':
                  var thisAttk = new Mage(engine.scene, this, players[targID]);
                  break;
            } 
         }
      }
 
      //this.moveTo(move);
   }

   update(delta) {
      this.translate( delta );
   }

   //Initialize a translation for the player, send current pos to server
   /*
   moveTo( pos ) {
      var x = pos[0];
      var z = pos[1];

      this.target = this.coords(x, z);

      // Signal for begin translation
      this.translateState = true;
      this.translateDir = this.target.clone();
      this.translateDir.sub(this.obj.position);

      if (this.index == 0) {
         this.sendMove();
      }
   }
   */

   sendMove() {
      var packet = JSON.stringify({
         "pos" : this.moveTarg
      });
      ws.send(packet);
   }
}

//We dont exactly have animation tracks for this project
class ProceduralAnimation {
   constructor() {
      this.clock = new THREE.Clock()
      this.elapsedTime = 0.0;
      this.delta = 0.0;
      this.setup()
      setTimeout(this.update.bind(this), 1000*tick/nAnim);
   }

   update() {
      this.delta = this.clock.getDelta();
      var time = this.elapsedTime + this.delta;
      this.elapsedTime = Math.min(time, tick);
      this.step(this.delta, this.elapsedTime);
      if (this.elapsedTime < tick) {
         setTimeout(this.update.bind(this), 1000*tick/nAnim);
      }
      else {
         this.finish();
      }
   }

   //Abstract
   step(delta, elapsedTime) {
      throw new Error('Must override abstract step method of ProceduralAnimation');
   }

   //Optional call before animation
   setup() {
   }

   //Optional call upon animation termination
   finish() {
   }

}

class Move extends ProceduralAnimation {
   constructor(ent, targ) {
      super();
      this.pos  = ent.obj.position.clone();
      this.targ = ent.coords(targ);
      this.isTarget = false;
      this.ent = ent;
   }

   step(delta, elapsedTime) {
      var moveFrac = elapsedTime / tick;
      var x = this.pos.x + moveFrac * (this.targ.x - this.pos.x);
      var y = this.pos.y + moveFrac * (this.targ.y - this.pos.y);
      var z = this.pos.z + moveFrac * (this.targ.z - this.pos.z);
      var pos = new THREE.Vector3(x, y, z)
      this.ent.obj.position.copy(pos);
      if (this.isTarget) {
         engine.camera.position.add(movement);
         engine.controls.target.copy(this.ent.obj.position);
      }
   }
}

class Damage extends ProceduralAnimation {
   constructor(ent, damage) {
      super();
      this.dmg = textsprite.makeTextSprite(damage, "200", '#ff0000');
      this.dmg.scale.set( 30, 30, 1 );
      this.height = 128
      this.dmg.position.y = this.height
      this.ent = ent;
      ent.obj.add(this.dmg)
   }

   step(delta, elapsedTime) {
      var moveFrac = elapsedTime / tick;
      this.dmg.position.y = this.height+32*moveFrac;
   }

   finish() {
      this.ent.obj.remove(this.dmg);
   }
}

class Attack extends ProceduralAnimation {
   constructor(scene, orig, targ) {
      super();
      this.orig = orig.obj;
      this.targ = targ.obj;
      this.scene = scene;

      var attkGeom = new THREE.SphereGeometry(8, 4, 4);
      var attkMatl = new THREE.MeshBasicMaterial( {
           color: this.color} );
      var attkMesh = new THREE.Mesh(attkGeom, attkMatl);
      this.attk = attkMesh
      this.attk.position.x = this.orig.x;
      this.attk.position.y = 128;
      this.attk.position.z = this.orig.z;
      scene.add(this.attk);
   }

   step(delta, elapsedTime) {
      var moveFrac = elapsedTime / tick;
      var x = this.orig.position.x + moveFrac * (this.targ.position.x - this.orig.position.x) + 32;
      var y = 128;
      var z = this.orig.position.z + moveFrac * (this.targ.position.z - this.orig.position.z) + 32;
      var pos = new THREE.Vector3(x, y, z)
      this.attk.position.copy(pos);
   }

   finish() {
      this.scene.remove(this.attk);
   }
}

class Melee extends Attack{
   setup() {
      this.color = '#ff0000';
   }
}

class Range extends Attack{
   setup() {
      this.color = '#00ff00';
   }
}

class Mage extends Attack{
   setup() {
      this.color = '#0000ff';
   }
}

class StatBar extends THREE.Object3D {
   constructor(width, height, color) {
      this.valBar = initSprite(color, width, height);
      this.redBar = initSprite(color, 0, height);

   }

}

class Overhead extends THREE.Object3D {
   constructor(params) {
      super()
      this.initBars()
      this.initName(params)
   }

   update(params) {
      this.health.scale.set(params['health'], 8, 1);
      this.food.scale.set(params['food'], 8, 1);
      this.water.scale.set(params['water'], 8, 1);
   }
   initBars() {
      this.health = this.initSprite(0x00ff00, 0);
      this.food = this.initSprite(0xd4af37, 8)
      this.water = this.initSprite(0x0000ff, 16)
      //this.red = this.initSprite(0xff0000, 0);
      //this.red.scale.set(64, 24, 1);
   }

   initSprite(hexColor, height) {
      var material = new THREE.SpriteMaterial({color: hexColor});
      var sprite = new THREE.Sprite(material)
      sprite.scale.set( 64, 8, 1 );
      sprite.position.y = height;
      this.add(sprite)
      return sprite
   }

   initName(params) {
      var sprite = textsprite.makeTextSprite(params['name'], "200", params['color']);
      // embiggen it
      sprite.scale.set( 30, 30, 1 );
      sprite.position.y = 30;
      this.add(sprite);
   }
}
